#include <stdio.h>
#include <stdlib.h>

struct AVLNode {
    int key;
    int height;
    struct AVLNode* left;
    struct AVLNode* right;
};

int max(int a, int b) {
    return (a > b) ? a : b;
}

int height(struct AVLNode* node) {
    if (!node)
        return 0;
    return node->height;
}

int get_balance(struct AVLNode* node) {
    if (!node)
        return 0;
    return height(node->left) - height(node->right);
}

struct AVLNode* new_node(int key) {
    struct AVLNode* node = (struct AVLNode*)malloc(sizeof(struct AVLNode));
    node->key = key;
    node->height = 1;
    node->left = NULL;
    node->right = NULL;
    return node;
}

struct AVLNode* rotate_right(struct AVLNode* y) {
    struct AVLNode* x = y->left;
    struct AVLNode* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;

    return x;
}

struct AVLNode* rotate_left(struct AVLNode* x) {
    struct AVLNode* y = x->right;
    struct AVLNode* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;

    return y;
}

struct AVLNode* insert(struct AVLNode* root, int key) {
    if (!root)
        return new_node(key);

    if (key < root->key)
        root->left = insert(root->left, key);
    else if (key > root->key)
        root->right = insert(root->right, key);
    else
        return root; // Duplicate keys are not allowed in AVL

    root->height = max(height(root->left), height(root->right)) + 1;

    int balance = get_balance(root);

    // Left Left Case
    if (balance > 1 && key < root->left->key)
        return rotate_right(root);

    // Right Right Case
    if (balance < -1 && key > root->right->key)
        return rotate_left(root);

    // Left Right Case
    if (balance > 1 && key > root->left->key) {
        root->left = rotate_left(root->left);
        return rotate_right(root);
    }

    // Right Left Case
    if (balance < -1 && key < root->right->key) {
        root->right = rotate_right(root->right);
        return rotate_left(root);
    }

    return root;
}

struct AVLNode* get_min_value_node(struct AVLNode* node) {
    struct AVLNode* current = node;
    while (current->left != NULL)
        current = current->left;
    return current;
}

struct AVLNode* delete_node(struct AVLNode* root, int key) {
    if (!root)
        return root;

    if (key < root->key)
        root->left = delete_node(root->left, key);
    else if (key > root->key)
        root->right = delete_node(root->right, key);
    else {
        if (!root->left || !root->right) {
            struct AVLNode* temp = root->left ? root->left : root->right;
            if (!temp) {
                temp = root;
                root = NULL;
            } else
                *root = *temp;
            free(temp);
        } else {
            struct AVLNode* temp = get_min_value_node(root->right);
            root->key = temp->key;
            root->right = delete_node(root->right, temp->key);
        }
    }

    if (!root)
        return root;

    root->height = max(height(root->left), height(root->right)) + 1;

    int balance = get_balance(root);

    if (balance > 1 && get_balance(root->left) >= 0)
        return rotate_right(root);

    // Right Right Case
    if (balance < -1 && get_balance(root->right) <= 0)
        return rotate_left(root);

    // Left Right Case
    if (balance > 1 && get_balance(root->left) < 0) {
        root->left = rotate_left(root->left);
        return rotate_right(root);
    }

    // Right Left Case
    if (balance < -1 && get_balance(root->right) > 0) {
        root->right = rotate_right(root->right);
        return rotate_left(root);
    }

    return root;
}

struct AVLNode* search(struct AVLNode* root, int key) {
    if (!root || root->key == key)
        return root;

    if (key < root->key)
        return search(root->left, key);
    else
        return search(root->right, key);
}

void in_order_traversal(struct AVLNode* root) {
    if (root) {
        in_order_traversal(root->left);
        printf("%d ", root->key);
        in_order_traversal(root->right);
    }
}

int main() {
    struct AVLNode* root = NULL;
    int keys[] = {9, 5, 10, 0, 6, 11, -1, 1, 2};
    int n = sizeof(keys) / sizeof(keys[0]);

    for (int i = 0; i < n; i++)
        root = insert(root, keys[i]);

    printf("In-order traversal after insertion:\n");
    in_order_traversal(root);

    int search_key = 6;
    struct AVLNode* search_result = search(root, search_key);
    printf("\nSearch result for key %d: %s\n", search_key, (search_result ? "Found" : "Not found"));

    int delete_key = 10;
    root = delete_node(root, delete_key);
    printf("\nIn-order traversal after deletion of key %d:\n", delete_key);
    in_order_traversal(root);

    return 0;
}
